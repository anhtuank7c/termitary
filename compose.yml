services:
  # MySQL Database
  mysql:
    image: mysql:8.4
    container_name: termitary_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: termitary
      MYSQL_USER: termitary_user
      MYSQL_PASSWORD: termitary_password
    ports:
      - '3306:3306'
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - termitary_network
    healthcheck:
      test: ['CMD', 'mysqladmin', 'ping', '-h', 'localhost', '-u', 'root', '-prootpassword']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: termitary_redis
    restart: unless-stopped
    command: redis-server --requirepass redis_password
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    networks:
      - termitary_network
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  # phpMyAdmin
  phpmyadmin:
    image: phpmyadmin:latest
    container_name: termitary_phpmyadmin
    restart: unless-stopped
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
      PMA_USER: root
      PMA_PASSWORD: rootpassword
      UPLOAD_LIMIT: 100M
    ports:
      - '8080:80'
    networks:
      - termitary_network
    depends_on:
      mysql:
        condition: service_healthy

  # Application (optional - uncomment to run app in Docker)
  # app:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   container_name: termitary_app
  #   restart: unless-stopped
  #   environment:
  #     NODE_ENV: ${NODE_ENV:-development}
  #     PORT: ${PORT:-3000}
  #     DB_HOST: mysql
  #     DB_PORT: 3306
  #     DB_USER: termitary_user
  #     DB_PASSWORD: termitary_password
  #     DB_NAME: termitary
  #     REDIS_HOST: redis
  #     REDIS_PORT: 6379
  #     REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
  #   ports:
  #     - '${PORT:-3000}:3000'
  #   volumes:
  #     - .:/app
  #     - /app/node_modules
  #   networks:
  #     - termitary_network
  #   depends_on:
  #     mysql:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy

networks:
  termitary_network:
    driver: bridge

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
